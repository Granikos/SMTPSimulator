//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HydraWebClient.HydraConfigurationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecieveConnector", Namespace="http://schemas.datacontract.org/2004/07/HydraService.Models")]
    [System.SerializableAttribute()]
    public partial class RecieveConnector : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BannerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydraWebClient.HydraConfigurationService.IPRange[] RemoteIPRangesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequireAuthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydraWebClient.HydraConfigurationService.TLSSettings TLSSettingsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddressString {
            get {
                return this.AddressStringField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressStringField, value) != true)) {
                    this.AddressStringField = value;
                    this.RaisePropertyChanged("AddressString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthPassword {
            get {
                return this.AuthPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthPasswordField, value) != true)) {
                    this.AuthPasswordField = value;
                    this.RaisePropertyChanged("AuthPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthUsername {
            get {
                return this.AuthUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthUsernameField, value) != true)) {
                    this.AuthUsernameField = value;
                    this.RaisePropertyChanged("AuthUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Banner {
            get {
                return this.BannerField;
            }
            set {
                if ((object.ReferenceEquals(this.BannerField, value) != true)) {
                    this.BannerField = value;
                    this.RaisePropertyChanged("Banner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydraWebClient.HydraConfigurationService.IPRange[] RemoteIPRanges {
            get {
                return this.RemoteIPRangesField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoteIPRangesField, value) != true)) {
                    this.RemoteIPRangesField = value;
                    this.RaisePropertyChanged("RemoteIPRanges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequireAuth {
            get {
                return this.RequireAuthField;
            }
            set {
                if ((this.RequireAuthField.Equals(value) != true)) {
                    this.RequireAuthField = value;
                    this.RaisePropertyChanged("RequireAuth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydraWebClient.HydraConfigurationService.TLSSettings TLSSettings {
            get {
                return this.TLSSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.TLSSettingsField, value) != true)) {
                    this.TLSSettingsField = value;
                    this.RaisePropertyChanged("TLSSettings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TLSSettings", Namespace="http://schemas.datacontract.org/2004/07/HydraService.Models")]
    [System.SerializableAttribute()]
    public partial class TLSSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydraWebClient.HydraConfigurationService.TLSAuthLevel AuthLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateDomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificatePasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.Security.EncryptionPolicy EncryptionPolicyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFilesystemCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydraWebClient.HydraConfigurationService.TLSMode ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Security.Authentication.SslProtocols SslProtocolsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ValidateCertificateRevocationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydraWebClient.HydraConfigurationService.TLSAuthLevel AuthLevel {
            get {
                return this.AuthLevelField;
            }
            set {
                if ((this.AuthLevelField.Equals(value) != true)) {
                    this.AuthLevelField = value;
                    this.RaisePropertyChanged("AuthLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateDomain {
            get {
                return this.CertificateDomainField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateDomainField, value) != true)) {
                    this.CertificateDomainField = value;
                    this.RaisePropertyChanged("CertificateDomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateName {
            get {
                return this.CertificateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateNameField, value) != true)) {
                    this.CertificateNameField = value;
                    this.RaisePropertyChanged("CertificateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificatePassword {
            get {
                return this.CertificatePasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificatePasswordField, value) != true)) {
                    this.CertificatePasswordField = value;
                    this.RaisePropertyChanged("CertificatePassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.Security.EncryptionPolicy EncryptionPolicy {
            get {
                return this.EncryptionPolicyField;
            }
            set {
                if ((this.EncryptionPolicyField.Equals(value) != true)) {
                    this.EncryptionPolicyField = value;
                    this.RaisePropertyChanged("EncryptionPolicy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFilesystemCertificate {
            get {
                return this.IsFilesystemCertificateField;
            }
            set {
                if ((this.IsFilesystemCertificateField.Equals(value) != true)) {
                    this.IsFilesystemCertificateField = value;
                    this.RaisePropertyChanged("IsFilesystemCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydraWebClient.HydraConfigurationService.TLSMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Security.Authentication.SslProtocols SslProtocols {
            get {
                return this.SslProtocolsField;
            }
            set {
                if ((this.SslProtocolsField.Equals(value) != true)) {
                    this.SslProtocolsField = value;
                    this.RaisePropertyChanged("SslProtocols");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ValidateCertificateRevocation {
            get {
                return this.ValidateCertificateRevocationField;
            }
            set {
                if ((this.ValidateCertificateRevocationField.Equals(value) != true)) {
                    this.ValidateCertificateRevocationField = value;
                    this.RaisePropertyChanged("ValidateCertificateRevocation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPRange", Namespace="http://schemas.datacontract.org/2004/07/HydraCore")]
    [System.SerializableAttribute()]
    public partial class IPRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartStringField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndString {
            get {
                return this.EndStringField;
            }
            set {
                if ((object.ReferenceEquals(this.EndStringField, value) != true)) {
                    this.EndStringField = value;
                    this.RaisePropertyChanged("EndString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartString {
            get {
                return this.StartStringField;
            }
            set {
                if ((object.ReferenceEquals(this.StartStringField, value) != true)) {
                    this.StartStringField = value;
                    this.RaisePropertyChanged("StartString");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TLSAuthLevel", Namespace="http://schemas.datacontract.org/2004/07/HydraService.Models")]
    public enum TLSAuthLevel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EncryptionOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertificateValidation = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainValidation = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TLSMode", Namespace="http://schemas.datacontract.org/2004/07/HydraService.Models")]
    public enum TLSMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Required = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullTunnel = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendConnector", Namespace="http://schemas.datacontract.org/2004/07/HydraService.Models")]
    [System.SerializableAttribute()]
    public partial class SendConnector : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DomainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocalAddressStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemoteAddressStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RemotePortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydraWebClient.HydraConfigurationService.TLSSettings TLSSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseAuthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseSmarthostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Domains {
            get {
                return this.DomainsField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainsField, value) != true)) {
                    this.DomainsField = value;
                    this.RaisePropertyChanged("Domains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocalAddressString {
            get {
                return this.LocalAddressStringField;
            }
            set {
                if ((object.ReferenceEquals(this.LocalAddressStringField, value) != true)) {
                    this.LocalAddressStringField = value;
                    this.RaisePropertyChanged("LocalAddressString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RemoteAddressString {
            get {
                return this.RemoteAddressStringField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoteAddressStringField, value) != true)) {
                    this.RemoteAddressStringField = value;
                    this.RaisePropertyChanged("RemoteAddressString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RemotePort {
            get {
                return this.RemotePortField;
            }
            set {
                if ((this.RemotePortField.Equals(value) != true)) {
                    this.RemotePortField = value;
                    this.RaisePropertyChanged("RemotePort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydraWebClient.HydraConfigurationService.TLSSettings TLSSettings {
            get {
                return this.TLSSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.TLSSettingsField, value) != true)) {
                    this.TLSSettingsField = value;
                    this.RaisePropertyChanged("TLSSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseAuth {
            get {
                return this.UseAuthField;
            }
            set {
                if ((this.UseAuthField.Equals(value) != true)) {
                    this.UseAuthField = value;
                    this.RaisePropertyChanged("UseAuth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseSmarthost {
            get {
                return this.UseSmarthostField;
            }
            set {
                if ((this.UseSmarthostField.Equals(value) != true)) {
                    this.UseSmarthostField = value;
                    this.RaisePropertyChanged("UseSmarthost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalUser", Namespace="http://schemas.datacontract.org/2004/07/HydraService.Models")]
    [System.SerializableAttribute()]
    public partial class LocalUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailboxField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mailbox {
            get {
                return this.MailboxField;
            }
            set {
                if ((object.ReferenceEquals(this.MailboxField, value) != true)) {
                    this.MailboxField = value;
                    this.RaisePropertyChanged("Mailbox");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HydraConfigurationService.IConfigurationService")]
    public interface IConfigurationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/SetProperty", ReplyAction="http://tempuri.org/IConfigurationService/SetPropertyResponse")]
        void SetProperty(string name, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/SetProperty", ReplyAction="http://tempuri.org/IConfigurationService/SetPropertyResponse")]
        System.Threading.Tasks.Task SetPropertyAsync(string name, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetDomains", ReplyAction="http://tempuri.org/IConfigurationService/GetDomainsResponse")]
        string[] GetDomains();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetDomains", ReplyAction="http://tempuri.org/IConfigurationService/GetDomainsResponse")]
        System.Threading.Tasks.Task<string[]> GetDomainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DomainExists", ReplyAction="http://tempuri.org/IConfigurationService/DomainExistsResponse")]
        bool DomainExists(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DomainExists", ReplyAction="http://tempuri.org/IConfigurationService/DomainExistsResponse")]
        System.Threading.Tasks.Task<bool> DomainExistsAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddDomain", ReplyAction="http://tempuri.org/IConfigurationService/AddDomainResponse")]
        bool AddDomain(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddDomain", ReplyAction="http://tempuri.org/IConfigurationService/AddDomainResponse")]
        System.Threading.Tasks.Task<bool> AddDomainAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteDomain", ReplyAction="http://tempuri.org/IConfigurationService/DeleteDomainResponse")]
        bool DeleteDomain(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteDomain", ReplyAction="http://tempuri.org/IConfigurationService/DeleteDomainResponse")]
        System.Threading.Tasks.Task<bool> DeleteDomainAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetDefaultRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetDefaultRecieveConnectorResponse")]
        HydraWebClient.HydraConfigurationService.RecieveConnector GetDefaultRecieveConnector();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetDefaultRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetDefaultRecieveConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> GetDefaultRecieveConnectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetRecieveConnectors", ReplyAction="http://tempuri.org/IConfigurationService/GetRecieveConnectorsResponse")]
        HydraWebClient.HydraConfigurationService.RecieveConnector[] GetRecieveConnectors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetRecieveConnectors", ReplyAction="http://tempuri.org/IConfigurationService/GetRecieveConnectorsResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector[]> GetRecieveConnectorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetRecieveConnectorResponse")]
        HydraWebClient.HydraConfigurationService.RecieveConnector GetRecieveConnector(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetRecieveConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> GetRecieveConnectorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/AddRecieveConnectorResponse")]
        HydraWebClient.HydraConfigurationService.RecieveConnector AddRecieveConnector(HydraWebClient.HydraConfigurationService.RecieveConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/AddRecieveConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> AddRecieveConnectorAsync(HydraWebClient.HydraConfigurationService.RecieveConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/UpdateRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/UpdateRecieveConnectorResponse")]
        HydraWebClient.HydraConfigurationService.RecieveConnector UpdateRecieveConnector(HydraWebClient.HydraConfigurationService.RecieveConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/UpdateRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/UpdateRecieveConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> UpdateRecieveConnectorAsync(HydraWebClient.HydraConfigurationService.RecieveConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/DeleteRecieveConnectorResponse")]
        bool DeleteRecieveConnector(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteRecieveConnector", ReplyAction="http://tempuri.org/IConfigurationService/DeleteRecieveConnectorResponse")]
        System.Threading.Tasks.Task<bool> DeleteRecieveConnectorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetDefaultSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetDefaultSendConnectorResponse")]
        HydraWebClient.HydraConfigurationService.SendConnector GetDefaultSendConnector();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetDefaultSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetDefaultSendConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> GetDefaultSendConnectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetSendConnectors", ReplyAction="http://tempuri.org/IConfigurationService/GetSendConnectorsResponse")]
        HydraWebClient.HydraConfigurationService.SendConnector[] GetSendConnectors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetSendConnectors", ReplyAction="http://tempuri.org/IConfigurationService/GetSendConnectorsResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector[]> GetSendConnectorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetSendConnectorResponse")]
        HydraWebClient.HydraConfigurationService.SendConnector GetSendConnector(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/GetSendConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> GetSendConnectorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/AddSendConnectorResponse")]
        HydraWebClient.HydraConfigurationService.SendConnector AddSendConnector(HydraWebClient.HydraConfigurationService.SendConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/AddSendConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> AddSendConnectorAsync(HydraWebClient.HydraConfigurationService.SendConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/UpdateSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/UpdateSendConnectorResponse")]
        HydraWebClient.HydraConfigurationService.SendConnector UpdateSendConnector(HydraWebClient.HydraConfigurationService.SendConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/UpdateSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/UpdateSendConnectorResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> UpdateSendConnectorAsync(HydraWebClient.HydraConfigurationService.SendConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/DeleteSendConnectorResponse")]
        bool DeleteSendConnector(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteSendConnector", ReplyAction="http://tempuri.org/IConfigurationService/DeleteSendConnectorResponse")]
        System.Threading.Tasks.Task<bool> DeleteSendConnectorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetLocalUsers", ReplyAction="http://tempuri.org/IConfigurationService/GetLocalUsersResponse")]
        HydraWebClient.HydraConfigurationService.LocalUser[] GetLocalUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetLocalUsers", ReplyAction="http://tempuri.org/IConfigurationService/GetLocalUsersResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser[]> GetLocalUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/GetLocalUserResponse")]
        HydraWebClient.HydraConfigurationService.LocalUser GetLocalUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/GetLocalUserResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser> GetLocalUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/AddLocalUserResponse")]
        HydraWebClient.HydraConfigurationService.LocalUser AddLocalUser(HydraWebClient.HydraConfigurationService.LocalUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/AddLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/AddLocalUserResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser> AddLocalUserAsync(HydraWebClient.HydraConfigurationService.LocalUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/UpdateLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/UpdateLocalUserResponse")]
        HydraWebClient.HydraConfigurationService.LocalUser UpdateLocalUser(HydraWebClient.HydraConfigurationService.LocalUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/UpdateLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/UpdateLocalUserResponse")]
        System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser> UpdateLocalUserAsync(HydraWebClient.HydraConfigurationService.LocalUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/DeleteLocalUserResponse")]
        bool DeleteLocalUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/DeleteLocalUser", ReplyAction="http://tempuri.org/IConfigurationService/DeleteLocalUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteLocalUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetCertificateFiles", ReplyAction="http://tempuri.org/IConfigurationService/GetCertificateFilesResponse")]
        string[] GetCertificateFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/GetCertificateFiles", ReplyAction="http://tempuri.org/IConfigurationService/GetCertificateFilesResponse")]
        System.Threading.Tasks.Task<string[]> GetCertificateFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/Start", ReplyAction="http://tempuri.org/IConfigurationService/StartResponse")]
        void Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/Start", ReplyAction="http://tempuri.org/IConfigurationService/StartResponse")]
        System.Threading.Tasks.Task StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/Stop", ReplyAction="http://tempuri.org/IConfigurationService/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/Stop", ReplyAction="http://tempuri.org/IConfigurationService/StopResponse")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/IsRunning", ReplyAction="http://tempuri.org/IConfigurationService/IsRunningResponse")]
        bool IsRunning();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationService/IsRunning", ReplyAction="http://tempuri.org/IConfigurationService/IsRunningResponse")]
        System.Threading.Tasks.Task<bool> IsRunningAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConfigurationServiceChannel : HydraWebClient.HydraConfigurationService.IConfigurationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConfigurationServiceClient : System.ServiceModel.ClientBase<HydraWebClient.HydraConfigurationService.IConfigurationService>, HydraWebClient.HydraConfigurationService.IConfigurationService {
        
        public ConfigurationServiceClient() {
        }
        
        public ConfigurationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConfigurationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConfigurationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConfigurationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetProperty(string name, string value) {
            base.Channel.SetProperty(name, value);
        }
        
        public System.Threading.Tasks.Task SetPropertyAsync(string name, string value) {
            return base.Channel.SetPropertyAsync(name, value);
        }
        
        public string[] GetDomains() {
            return base.Channel.GetDomains();
        }
        
        public System.Threading.Tasks.Task<string[]> GetDomainsAsync() {
            return base.Channel.GetDomainsAsync();
        }
        
        public bool DomainExists(string domain) {
            return base.Channel.DomainExists(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DomainExistsAsync(string domain) {
            return base.Channel.DomainExistsAsync(domain);
        }
        
        public bool AddDomain(string domain) {
            return base.Channel.AddDomain(domain);
        }
        
        public System.Threading.Tasks.Task<bool> AddDomainAsync(string domain) {
            return base.Channel.AddDomainAsync(domain);
        }
        
        public bool DeleteDomain(string domain) {
            return base.Channel.DeleteDomain(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDomainAsync(string domain) {
            return base.Channel.DeleteDomainAsync(domain);
        }
        
        public HydraWebClient.HydraConfigurationService.RecieveConnector GetDefaultRecieveConnector() {
            return base.Channel.GetDefaultRecieveConnector();
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> GetDefaultRecieveConnectorAsync() {
            return base.Channel.GetDefaultRecieveConnectorAsync();
        }
        
        public HydraWebClient.HydraConfigurationService.RecieveConnector[] GetRecieveConnectors() {
            return base.Channel.GetRecieveConnectors();
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector[]> GetRecieveConnectorsAsync() {
            return base.Channel.GetRecieveConnectorsAsync();
        }
        
        public HydraWebClient.HydraConfigurationService.RecieveConnector GetRecieveConnector(int id) {
            return base.Channel.GetRecieveConnector(id);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> GetRecieveConnectorAsync(int id) {
            return base.Channel.GetRecieveConnectorAsync(id);
        }
        
        public HydraWebClient.HydraConfigurationService.RecieveConnector AddRecieveConnector(HydraWebClient.HydraConfigurationService.RecieveConnector connector) {
            return base.Channel.AddRecieveConnector(connector);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> AddRecieveConnectorAsync(HydraWebClient.HydraConfigurationService.RecieveConnector connector) {
            return base.Channel.AddRecieveConnectorAsync(connector);
        }
        
        public HydraWebClient.HydraConfigurationService.RecieveConnector UpdateRecieveConnector(HydraWebClient.HydraConfigurationService.RecieveConnector connector) {
            return base.Channel.UpdateRecieveConnector(connector);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.RecieveConnector> UpdateRecieveConnectorAsync(HydraWebClient.HydraConfigurationService.RecieveConnector connector) {
            return base.Channel.UpdateRecieveConnectorAsync(connector);
        }
        
        public bool DeleteRecieveConnector(int id) {
            return base.Channel.DeleteRecieveConnector(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRecieveConnectorAsync(int id) {
            return base.Channel.DeleteRecieveConnectorAsync(id);
        }
        
        public HydraWebClient.HydraConfigurationService.SendConnector GetDefaultSendConnector() {
            return base.Channel.GetDefaultSendConnector();
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> GetDefaultSendConnectorAsync() {
            return base.Channel.GetDefaultSendConnectorAsync();
        }
        
        public HydraWebClient.HydraConfigurationService.SendConnector[] GetSendConnectors() {
            return base.Channel.GetSendConnectors();
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector[]> GetSendConnectorsAsync() {
            return base.Channel.GetSendConnectorsAsync();
        }
        
        public HydraWebClient.HydraConfigurationService.SendConnector GetSendConnector(int id) {
            return base.Channel.GetSendConnector(id);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> GetSendConnectorAsync(int id) {
            return base.Channel.GetSendConnectorAsync(id);
        }
        
        public HydraWebClient.HydraConfigurationService.SendConnector AddSendConnector(HydraWebClient.HydraConfigurationService.SendConnector connector) {
            return base.Channel.AddSendConnector(connector);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> AddSendConnectorAsync(HydraWebClient.HydraConfigurationService.SendConnector connector) {
            return base.Channel.AddSendConnectorAsync(connector);
        }
        
        public HydraWebClient.HydraConfigurationService.SendConnector UpdateSendConnector(HydraWebClient.HydraConfigurationService.SendConnector connector) {
            return base.Channel.UpdateSendConnector(connector);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.SendConnector> UpdateSendConnectorAsync(HydraWebClient.HydraConfigurationService.SendConnector connector) {
            return base.Channel.UpdateSendConnectorAsync(connector);
        }
        
        public bool DeleteSendConnector(int id) {
            return base.Channel.DeleteSendConnector(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSendConnectorAsync(int id) {
            return base.Channel.DeleteSendConnectorAsync(id);
        }
        
        public HydraWebClient.HydraConfigurationService.LocalUser[] GetLocalUsers() {
            return base.Channel.GetLocalUsers();
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser[]> GetLocalUsersAsync() {
            return base.Channel.GetLocalUsersAsync();
        }
        
        public HydraWebClient.HydraConfigurationService.LocalUser GetLocalUser(int id) {
            return base.Channel.GetLocalUser(id);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser> GetLocalUserAsync(int id) {
            return base.Channel.GetLocalUserAsync(id);
        }
        
        public HydraWebClient.HydraConfigurationService.LocalUser AddLocalUser(HydraWebClient.HydraConfigurationService.LocalUser user) {
            return base.Channel.AddLocalUser(user);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser> AddLocalUserAsync(HydraWebClient.HydraConfigurationService.LocalUser user) {
            return base.Channel.AddLocalUserAsync(user);
        }
        
        public HydraWebClient.HydraConfigurationService.LocalUser UpdateLocalUser(HydraWebClient.HydraConfigurationService.LocalUser user) {
            return base.Channel.UpdateLocalUser(user);
        }
        
        public System.Threading.Tasks.Task<HydraWebClient.HydraConfigurationService.LocalUser> UpdateLocalUserAsync(HydraWebClient.HydraConfigurationService.LocalUser user) {
            return base.Channel.UpdateLocalUserAsync(user);
        }
        
        public bool DeleteLocalUser(int id) {
            return base.Channel.DeleteLocalUser(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLocalUserAsync(int id) {
            return base.Channel.DeleteLocalUserAsync(id);
        }
        
        public string[] GetCertificateFiles() {
            return base.Channel.GetCertificateFiles();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCertificateFilesAsync() {
            return base.Channel.GetCertificateFilesAsync();
        }
        
        public void Start() {
            base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task StartAsync() {
            return base.Channel.StartAsync();
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public bool IsRunning() {
            return base.Channel.IsRunning();
        }
        
        public System.Threading.Tasks.Task<bool> IsRunningAsync() {
            return base.Channel.IsRunningAsync();
        }
    }
}
